// Code generated by generate_handlers.go; DO NOT EDIT.

package etc_meisai

import (
	"net/http"
	"log"
)

// DynamicHandlerRegistry は動的にハンドラーを取得するためのレジストリ
// Swaggerから自動生成され、ハンドラーの存在を動的にチェックします
func (s *EtcMeisaiService) DynamicHandlerRegistry() map[string]func(http.ResponseWriter, *http.Request) {
	handlers := make(map[string]func(http.ResponseWriter, *http.Request))

	// Swaggerから取得したエンドポイントに対応するハンドラーを動的にチェック

	// ParseCSVHandler - /api/etc/parse-csv [POST]
	if h := HandlerChecker["ParseCSVHandler"]; h != nil {
		if handler := h(); handler != nil {
			handlers["ParseCSVHandler"] = handler
			log.Printf("✓ Handler found: ParseCSVHandler")
		}
	}

	// HealthCheckHandler - /health [GET]
	if h := HandlerChecker["HealthCheckHandler"]; h != nil {
		if handler := h(); handler != nil {
			handlers["HealthCheckHandler"] = handler
			log.Printf("✓ Handler found: HealthCheckHandler")
		}
	}

	// GetAvailableAccountsHandler - /api/etc/accounts [GET]
	if h := HandlerChecker["GetAvailableAccountsHandler"]; h != nil {
		if handler := h(); handler != nil {
			handlers["GetAvailableAccountsHandler"] = handler
			log.Printf("✓ Handler found: GetAvailableAccountsHandler")
		}
	}

	// DownloadETCDataHandler - /api/etc/download [POST]
	if h := HandlerChecker["DownloadETCDataHandler"]; h != nil {
		if handler := h(); handler != nil {
			handlers["DownloadETCDataHandler"] = handler
			log.Printf("✓ Handler found: DownloadETCDataHandler")
		}
	}

	// DownloadSingleAccountHandler - /api/etc/download-single [POST]
	if h := HandlerChecker["DownloadSingleAccountHandler"]; h != nil {
		if handler := h(); handler != nil {
			handlers["DownloadSingleAccountHandler"] = handler
			log.Printf("✓ Handler found: DownloadSingleAccountHandler")
		}
	}

	// DownloadAsyncHandler - /api/etc/download-async [POST]
	if h := HandlerChecker["DownloadAsyncHandler"]; h != nil {
		if handler := h(); handler != nil {
			handlers["DownloadAsyncHandler"] = handler
			log.Printf("✓ Handler found: DownloadAsyncHandler")
		}
	}

	// GetDownloadStatusHandler - /api/etc/download-status/{job_id} [GET]
	if h := HandlerChecker["GetDownloadStatusHandler"]; h != nil {
		if handler := h(); handler != nil {
			handlers["GetDownloadStatusHandler"] = handler
			log.Printf("✓ Handler found: GetDownloadStatusHandler")
		}
	}


	return handlers
}

// GetHandlerForEndpoint はエンドポイントに対応するハンドラー名を返す
func (s *EtcMeisaiService) GetHandlerForEndpoint(path string, method string) string {
	mapping := map[string]string{

		"POST:/api/etc/parse-csv": "ParseCSVHandler",

		"GET:/health": "HealthCheckHandler",

		"GET:/api/etc/accounts": "GetAvailableAccountsHandler",

		"POST:/api/etc/download": "DownloadETCDataHandler",

		"POST:/api/etc/download-single": "DownloadSingleAccountHandler",

		"POST:/api/etc/download-async": "DownloadAsyncHandler",

		"GET:/api/etc/download-status/{job_id}": "GetDownloadStatusHandler",

	}

	key := method + ":" + path
	return mapping[key]
}
