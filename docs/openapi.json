{
  "components": {
    "schemas": {
      "DownloadRequest": {
        "properties": {
          "accounts": {
            "description": "アカウント情報の配列。\n省略した場合は環境変数 `ETC_CORP_ACCOUNTS` から自動的に読み込まれます。\n\n環境変数の形式: `ohishiexp:pass1,ohishiexp1:pass2`\n",
            "items": {
              "properties": {
                "password": {
                  "description": "ETCサイトのパスワード",
                  "example": "password123",
                  "type": "string"
                },
                "user_id": {
                  "description": "ETCサイトのユーザーID",
                  "example": "ohishiexp",
                  "type": "string"
                }
              },
              "required": [
                "user_id",
                "password"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "config": {
            "description": "スクレイピング処理の詳細設定（省略可能）",
            "properties": {
              "download_path": {
                "default": "./downloads",
                "description": "CSVファイルのダウンロード先ディレクトリ",
                "example": "./custom_downloads",
                "type": "string"
              },
              "headless": {
                "default": true,
                "description": "ブラウザを非表示モードで実行するか",
                "type": "boolean"
              },
              "retry_count": {
                "default": 3,
                "description": "エラー時のリトライ回数",
                "example": 5,
                "type": "integer"
              },
              "timeout": {
                "default": 30000,
                "description": "タイムアウト時間（ミリ秒）",
                "example": 60000,
                "type": "integer"
              }
            },
            "type": "object"
          },
          "from_date": {
            "description": "明細取得開始日（YYYY-MM-DD形式）",
            "example": "2025-08-01",
            "format": "date",
            "type": "string"
          },
          "to_date": {
            "description": "明細取得終了日（YYYY-MM-DD形式）",
            "example": "2025-09-15",
            "format": "date",
            "type": "string"
          }
        },
        "required": [
          "from_date",
          "to_date"
        ],
        "type": "object"
      },
      "DownloadResponse": {
        "properties": {
          "failed_count": {
            "description": "失敗アカウント数",
            "type": "integer"
          },
          "results": {
            "items": {
              "$ref": "#/components/schemas/DownloadResult"
            },
            "type": "array"
          },
          "success_count": {
            "description": "成功アカウント数",
            "type": "integer"
          },
          "total_records": {
            "description": "総レコード数",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "DownloadResult": {
        "properties": {
          "account": {
            "description": "アカウント名",
            "type": "string"
          },
          "csv_path": {
            "description": "ダウンロードしたCSVファイルのパス",
            "type": "string"
          },
          "error": {
            "description": "エラーメッセージ（失敗時）",
            "type": "string"
          },
          "record_count": {
            "description": "レコード数",
            "type": "integer"
          },
          "records": {
            "items": {
              "$ref": "#/components/schemas/ETCMeisai"
            },
            "type": "array"
          },
          "success": {
            "description": "処理成功フラグ",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ETCMeisai": {
        "properties": {
          "amount": {
            "description": "通行料金",
            "example": 1200,
            "type": "integer"
          },
          "card_number": {
            "description": "ETCカード番号",
            "example": "****1234",
            "type": "string"
          },
          "created_at": {
            "description": "作成日時",
            "format": "date-time",
            "type": "string"
          },
          "discount_amount": {
            "description": "割引額",
            "example": 300,
            "type": "integer"
          },
          "distance": {
            "description": "走行距離(km)",
            "example": 35.2,
            "format": "float",
            "type": "number"
          },
          "entrance_ic": {
            "description": "IC入口",
            "example": "東京",
            "type": "string"
          },
          "exit_ic": {
            "description": "IC出口",
            "example": "横浜",
            "type": "string"
          },
          "id": {
            "description": "明細ID",
            "type": "integer"
          },
          "note": {
            "description": "備考",
            "type": "string"
          },
          "total_amount": {
            "description": "請求額",
            "example": 900,
            "type": "integer"
          },
          "unko_no": {
            "description": "運行番号",
            "example": "UN20250915001",
            "type": "string"
          },
          "usage_date": {
            "description": "利用年月日",
            "example": "2025-09-15",
            "type": "string"
          },
          "usage_time": {
            "description": "利用時刻",
            "example": "14:30",
            "type": "string"
          },
          "vehicle_number": {
            "description": "車両番号",
            "example": "品川500あ1234",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SingleDownloadRequest": {
        "properties": {
          "from_date": {
            "format": "date",
            "type": "string"
          },
          "password": {
            "description": "パスワード",
            "type": "string"
          },
          "to_date": {
            "format": "date",
            "type": "string"
          },
          "user_id": {
            "description": "ETCサイトのユーザーID。\n異なるアカウントタイプ（ohishiexp, ohishiexp1）で\nページ構造が異なるため、正しいユーザーIDを指定してください。\n",
            "type": "string"
          }
        },
        "required": [
          "user_id",
          "password",
          "from_date",
          "to_date"
        ],
        "type": "object"
      },
      "models.DtakoEvent": {
        "properties": {
          "created_at": {
            "example": "2025-01-13T15:04:05Z",
            "type": "string"
          },
          "description": {
            "example": "Started driving from depot",
            "type": "string"
          },
          "driver_code": {
            "example": "driver-123",
            "type": "string"
          },
          "event_date": {
            "example": "2025-01-13T10:30:00Z",
            "type": "string"
          },
          "event_type": {
            "example": "運転",
            "type": "string"
          },
          "id": {
            "example": "event-456",
            "type": "string"
          },
          "latitude": {
            "example": 35.6762,
            "type": "number"
          },
          "longitude": {
            "example": 139.6503,
            "type": "number"
          },
          "unko_no": {
            "description": "運行NO - links to DtakoRow",
            "example": "2025010101",
            "type": "string"
          },
          "updated_at": {
            "example": "2025-01-13T15:04:05Z",
            "type": "string"
          },
          "vehicle_no": {
            "example": "vehicle-001",
            "type": "string"
          }
        },
        "type": "object"
      },
      "models.DtakoFerryRow": {
        "properties": {
          "boarding_code": {
            "description": "乗場CD",
            "example": 1,
            "type": "integer"
          },
          "boarding_name": {
            "description": "乗場名",
            "example": "東京港",
            "type": "string"
          },
          "contract_fare": {
            "description": "契約料金",
            "example": 8000,
            "type": "integer"
          },
          "driver_code_1": {
            "description": "乗務員CD1",
            "example": 1001,
            "type": "integer"
          },
          "driver_name_1": {
            "description": "乗務員名１",
            "example": "山田太郎",
            "type": "string"
          },
          "end_time": {
            "description": "終了日時",
            "example": "2025-01-13T12:00:00Z",
            "type": "string"
          },
          "estimated_distance": {
            "description": "見なし距離",
            "example": 500,
            "type": "integer"
          },
          "ferry_company_code": {
            "description": "フェリー会社CD",
            "example": 1,
            "type": "integer"
          },
          "ferry_company_name": {
            "description": "フェリー会社名",
            "example": "東京フェリー",
            "type": "string"
          },
          "ferry_search": {
            "description": "ferry_srch",
            "example": "東京-大阪",
            "type": "string"
          },
          "id": {
            "example": 1,
            "type": "integer"
          },
          "landing_code": {
            "description": "降場CD",
            "example": 2,
            "type": "integer"
          },
          "landing_name": {
            "description": "降場名",
            "example": "大阪港",
            "type": "string"
          },
          "office_code": {
            "description": "事業所CD",
            "example": 1,
            "type": "integer"
          },
          "office_name": {
            "description": "事業所名",
            "example": "東京事業所",
            "type": "string"
          },
          "read_date": {
            "description": "読取日",
            "example": "2025-01-13T00:00:00Z",
            "type": "string"
          },
          "settlement_class": {
            "description": "精算区分",
            "example": 1,
            "type": "integer"
          },
          "settlement_name": {
            "description": "精算区分名",
            "example": "現金",
            "type": "string"
          },
          "ship_number": {
            "description": "便",
            "example": "1便",
            "type": "string"
          },
          "ship_vehicle_class": {
            "description": "航送車種区分",
            "example": 1,
            "type": "integer"
          },
          "ship_vehicle_name": {
            "description": "航送車種区分名",
            "example": "大型車",
            "type": "string"
          },
          "standard_fare": {
            "description": "標準料金",
            "example": 10000,
            "type": "integer"
          },
          "start_time": {
            "description": "開始日時",
            "example": "2025-01-13T08:00:00Z",
            "type": "string"
          },
          "target_driver_class": {
            "description": "対象乗務員区分",
            "example": 1,
            "type": "integer"
          },
          "unko_date": {
            "description": "運行日",
            "example": "2025-01-13T00:00:00Z",
            "type": "string"
          },
          "unko_no": {
            "description": "運行NO",
            "example": "2025010101",
            "type": "string"
          },
          "vehicle_code": {
            "description": "車輌CD",
            "example": 101,
            "type": "integer"
          },
          "vehicle_name": {
            "description": "車輌名",
            "example": "トラック1号",
            "type": "string"
          }
        },
        "type": "object"
      },
      "models.DtakoRow": {
        "properties": {
          "created_at": {
            "example": "2025-01-13T15:04:05Z",
            "type": "string"
          },
          "date": {
            "example": "2025-01-13T00:00:00Z",
            "type": "string"
          },
          "distance": {
            "example": 123.45,
            "type": "number"
          },
          "driver_code": {
            "example": "driver-123",
            "type": "string"
          },
          "fuel_amount": {
            "example": 45.67,
            "type": "number"
          },
          "id": {
            "example": "row-123",
            "type": "string"
          },
          "read_date": {
            "example": "2025-01-13T00:00:00Z",
            "type": "string"
          },
          "route_code": {
            "example": "route-A",
            "type": "string"
          },
          "unko_no": {
            "description": "運行NO",
            "example": "2025010101",
            "type": "string"
          },
          "updated_at": {
            "example": "2025-01-13T15:04:05Z",
            "type": "string"
          },
          "vehicle_no": {
            "example": "vehicle-001",
            "type": "string"
          }
        },
        "type": "object"
      },
      "models.ErrorResponse": {
        "properties": {
          "code": {
            "example": 400,
            "type": "integer"
          },
          "message": {
            "example": "Invalid request parameters",
            "type": "string"
          }
        },
        "type": "object"
      },
      "models.ImportRequest": {
        "properties": {
          "event_type": {
            "description": "For events",
            "example": "運転",
            "type": "string"
          },
          "ferry_company": {
            "description": "For ferry rows",
            "example": "東京フェリー",
            "type": "string"
          },
          "from_date": {
            "example": "2025-01-01",
            "type": "string"
          },
          "to_date": {
            "example": "2025-01-31",
            "type": "string"
          }
        },
        "type": "object"
      },
      "models.ImportResult": {
        "properties": {
          "errors": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "imported_at": {
            "example": "2025-01-13T15:04:05Z",
            "type": "string"
          },
          "imported_rows": {
            "example": 150,
            "type": "integer"
          },
          "message": {
            "example": "Imported 150 rows successfully",
            "type": "string"
          },
          "success": {
            "example": true,
            "type": "boolean"
          }
        },
        "type": "object"
      }
    },
    "securitySchemes": {
      "ApiKeyAuth": {
        "in": "header",
        "name": "Authorization",
        "type": "apiKey"
      }
    }
  },
  "definitions": {
    "DownloadRequest": {
      "properties": {
        "accounts": {
          "description": "アカウント情報の配列。\n省略した場合は環境変数 `ETC_CORP_ACCOUNTS` から自動的に読み込まれます。\n\n環境変数の形式: `ohishiexp:pass1,ohishiexp1:pass2`\n",
          "items": {
            "properties": {
              "password": {
                "description": "ETCサイトのパスワード",
                "example": "password123",
                "type": "string"
              },
              "user_id": {
                "description": "ETCサイトのユーザーID",
                "example": "ohishiexp",
                "type": "string"
              }
            },
            "required": [
              "user_id",
              "password"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "config": {
          "description": "スクレイピング処理の詳細設定（省略可能）",
          "properties": {
            "download_path": {
              "default": "./downloads",
              "description": "CSVファイルのダウンロード先ディレクトリ",
              "example": "./custom_downloads",
              "type": "string"
            },
            "headless": {
              "default": true,
              "description": "ブラウザを非表示モードで実行するか",
              "type": "boolean"
            },
            "retry_count": {
              "default": 3,
              "description": "エラー時のリトライ回数",
              "example": 5,
              "type": "integer"
            },
            "timeout": {
              "default": 30000,
              "description": "タイムアウト時間（ミリ秒）",
              "example": 60000,
              "type": "integer"
            }
          },
          "type": "object"
        },
        "from_date": {
          "description": "明細取得開始日（YYYY-MM-DD形式）",
          "example": "2025-08-01",
          "format": "date",
          "type": "string"
        },
        "to_date": {
          "description": "明細取得終了日（YYYY-MM-DD形式）",
          "example": "2025-09-15",
          "format": "date",
          "type": "string"
        }
      },
      "required": [
        "from_date",
        "to_date"
      ],
      "type": "object"
    },
    "DownloadResponse": {
      "properties": {
        "failed_count": {
          "description": "失敗アカウント数",
          "type": "integer"
        },
        "results": {
          "items": {
            "$ref": "#/components/schemas/DownloadResult"
          },
          "type": "array"
        },
        "success_count": {
          "description": "成功アカウント数",
          "type": "integer"
        },
        "total_records": {
          "description": "総レコード数",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "DownloadResult": {
      "properties": {
        "account": {
          "description": "アカウント名",
          "type": "string"
        },
        "csv_path": {
          "description": "ダウンロードしたCSVファイルのパス",
          "type": "string"
        },
        "error": {
          "description": "エラーメッセージ（失敗時）",
          "type": "string"
        },
        "record_count": {
          "description": "レコード数",
          "type": "integer"
        },
        "records": {
          "items": {
            "$ref": "#/components/schemas/ETCMeisai"
          },
          "type": "array"
        },
        "success": {
          "description": "処理成功フラグ",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ETCMeisai": {
      "properties": {
        "amount": {
          "description": "通行料金",
          "example": 1200,
          "type": "integer"
        },
        "card_number": {
          "description": "ETCカード番号",
          "example": "****1234",
          "type": "string"
        },
        "created_at": {
          "description": "作成日時",
          "format": "date-time",
          "type": "string"
        },
        "discount_amount": {
          "description": "割引額",
          "example": 300,
          "type": "integer"
        },
        "distance": {
          "description": "走行距離(km)",
          "example": 35.2,
          "format": "float",
          "type": "number"
        },
        "entrance_ic": {
          "description": "IC入口",
          "example": "東京",
          "type": "string"
        },
        "exit_ic": {
          "description": "IC出口",
          "example": "横浜",
          "type": "string"
        },
        "id": {
          "description": "明細ID",
          "type": "integer"
        },
        "note": {
          "description": "備考",
          "type": "string"
        },
        "total_amount": {
          "description": "請求額",
          "example": 900,
          "type": "integer"
        },
        "unko_no": {
          "description": "運行番号",
          "example": "UN20250915001",
          "type": "string"
        },
        "usage_date": {
          "description": "利用年月日",
          "example": "2025-09-15",
          "type": "string"
        },
        "usage_time": {
          "description": "利用時刻",
          "example": "14:30",
          "type": "string"
        },
        "vehicle_number": {
          "description": "車両番号",
          "example": "品川500あ1234",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SingleDownloadRequest": {
      "properties": {
        "from_date": {
          "format": "date",
          "type": "string"
        },
        "password": {
          "description": "パスワード",
          "type": "string"
        },
        "to_date": {
          "format": "date",
          "type": "string"
        },
        "user_id": {
          "description": "ETCサイトのユーザーID。\n異なるアカウントタイプ（ohishiexp, ohishiexp1）で\nページ構造が異なるため、正しいユーザーIDを指定してください。\n",
          "type": "string"
        }
      },
      "required": [
        "user_id",
        "password",
        "from_date",
        "to_date"
      ],
      "type": "object"
    },
    "models.DtakoEvent": {
      "properties": {
        "created_at": {
          "example": "2025-01-13T15:04:05Z",
          "type": "string"
        },
        "description": {
          "example": "Started driving from depot",
          "type": "string"
        },
        "driver_code": {
          "example": "driver-123",
          "type": "string"
        },
        "event_date": {
          "example": "2025-01-13T10:30:00Z",
          "type": "string"
        },
        "event_type": {
          "example": "運転",
          "type": "string"
        },
        "id": {
          "example": "event-456",
          "type": "string"
        },
        "latitude": {
          "example": 35.6762,
          "type": "number"
        },
        "longitude": {
          "example": 139.6503,
          "type": "number"
        },
        "unko_no": {
          "description": "運行NO - links to DtakoRow",
          "example": "2025010101",
          "type": "string"
        },
        "updated_at": {
          "example": "2025-01-13T15:04:05Z",
          "type": "string"
        },
        "vehicle_no": {
          "example": "vehicle-001",
          "type": "string"
        }
      },
      "type": "object"
    },
    "models.DtakoFerryRow": {
      "properties": {
        "boarding_code": {
          "description": "乗場CD",
          "example": 1,
          "type": "integer"
        },
        "boarding_name": {
          "description": "乗場名",
          "example": "東京港",
          "type": "string"
        },
        "contract_fare": {
          "description": "契約料金",
          "example": 8000,
          "type": "integer"
        },
        "driver_code_1": {
          "description": "乗務員CD1",
          "example": 1001,
          "type": "integer"
        },
        "driver_name_1": {
          "description": "乗務員名１",
          "example": "山田太郎",
          "type": "string"
        },
        "end_time": {
          "description": "終了日時",
          "example": "2025-01-13T12:00:00Z",
          "type": "string"
        },
        "estimated_distance": {
          "description": "見なし距離",
          "example": 500,
          "type": "integer"
        },
        "ferry_company_code": {
          "description": "フェリー会社CD",
          "example": 1,
          "type": "integer"
        },
        "ferry_company_name": {
          "description": "フェリー会社名",
          "example": "東京フェリー",
          "type": "string"
        },
        "ferry_search": {
          "description": "ferry_srch",
          "example": "東京-大阪",
          "type": "string"
        },
        "id": {
          "example": 1,
          "type": "integer"
        },
        "landing_code": {
          "description": "降場CD",
          "example": 2,
          "type": "integer"
        },
        "landing_name": {
          "description": "降場名",
          "example": "大阪港",
          "type": "string"
        },
        "office_code": {
          "description": "事業所CD",
          "example": 1,
          "type": "integer"
        },
        "office_name": {
          "description": "事業所名",
          "example": "東京事業所",
          "type": "string"
        },
        "read_date": {
          "description": "読取日",
          "example": "2025-01-13T00:00:00Z",
          "type": "string"
        },
        "settlement_class": {
          "description": "精算区分",
          "example": 1,
          "type": "integer"
        },
        "settlement_name": {
          "description": "精算区分名",
          "example": "現金",
          "type": "string"
        },
        "ship_number": {
          "description": "便",
          "example": "1便",
          "type": "string"
        },
        "ship_vehicle_class": {
          "description": "航送車種区分",
          "example": 1,
          "type": "integer"
        },
        "ship_vehicle_name": {
          "description": "航送車種区分名",
          "example": "大型車",
          "type": "string"
        },
        "standard_fare": {
          "description": "標準料金",
          "example": 10000,
          "type": "integer"
        },
        "start_time": {
          "description": "開始日時",
          "example": "2025-01-13T08:00:00Z",
          "type": "string"
        },
        "target_driver_class": {
          "description": "対象乗務員区分",
          "example": 1,
          "type": "integer"
        },
        "unko_date": {
          "description": "運行日",
          "example": "2025-01-13T00:00:00Z",
          "type": "string"
        },
        "unko_no": {
          "description": "運行NO",
          "example": "2025010101",
          "type": "string"
        },
        "vehicle_code": {
          "description": "車輌CD",
          "example": 101,
          "type": "integer"
        },
        "vehicle_name": {
          "description": "車輌名",
          "example": "トラック1号",
          "type": "string"
        }
      },
      "type": "object"
    },
    "models.DtakoRow": {
      "properties": {
        "created_at": {
          "example": "2025-01-13T15:04:05Z",
          "type": "string"
        },
        "date": {
          "example": "2025-01-13T00:00:00Z",
          "type": "string"
        },
        "distance": {
          "example": 123.45,
          "type": "number"
        },
        "driver_code": {
          "example": "driver-123",
          "type": "string"
        },
        "fuel_amount": {
          "example": 45.67,
          "type": "number"
        },
        "id": {
          "example": "row-123",
          "type": "string"
        },
        "read_date": {
          "example": "2025-01-13T00:00:00Z",
          "type": "string"
        },
        "route_code": {
          "example": "route-A",
          "type": "string"
        },
        "unko_no": {
          "description": "運行NO",
          "example": "2025010101",
          "type": "string"
        },
        "updated_at": {
          "example": "2025-01-13T15:04:05Z",
          "type": "string"
        },
        "vehicle_no": {
          "example": "vehicle-001",
          "type": "string"
        }
      },
      "type": "object"
    },
    "models.ErrorResponse": {
      "properties": {
        "code": {
          "example": 400,
          "type": "integer"
        },
        "message": {
          "example": "Invalid request parameters",
          "type": "string"
        }
      },
      "type": "object"
    },
    "models.ImportRequest": {
      "properties": {
        "event_type": {
          "description": "For events",
          "example": "運転",
          "type": "string"
        },
        "ferry_company": {
          "description": "For ferry rows",
          "example": "東京フェリー",
          "type": "string"
        },
        "from_date": {
          "example": "2025-01-01",
          "type": "string"
        },
        "to_date": {
          "example": "2025-01-31",
          "type": "string"
        }
      },
      "type": "object"
    },
    "models.ImportResult": {
      "properties": {
        "errors": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "imported_at": {
          "example": "2025-01-13T15:04:05Z",
          "type": "string"
        },
        "imported_rows": {
          "example": 150,
          "type": "integer"
        },
        "message": {
          "example": "Imported 150 rows successfully",
          "type": "string"
        },
        "success": {
          "example": true,
          "type": "boolean"
        }
      },
      "type": "object"
    }
  },
  "info": {
    "contact": {
      "email": "support@swagger.io",
      "name": "API Support",
      "url": "http://www.swagger.io/support"
    },
    "description": "高性能なリクエストルーティングシステム (DTako Module v1.4.0, ETC Meisai Module v0.0.16)",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "termsOfService": "http://swagger.io/terms/",
    "title": "Ryohi Router API",
    "version": "1.0.0"
  },
  "openapi": "3.0.3",
  "paths": {
    "/admin/backends": {
      "get": {
        "description": "Get a list of all configured backend services",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/models.BackendService"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "List all backends",
        "tags": [
          "admin"
        ]
      },
      "post": {
        "description": "Add a new backend service configuration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/models.BackendService"
              }
            }
          },
          "description": "Backend configuration",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/models.BackendService"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Invalid request body"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Create a new backend",
        "tags": [
          "admin"
        ]
      }
    },
    "/admin/backends/{id}/health": {
      "get": {
        "description": "Get health status of a specific backend service",
        "parameters": [
          {
            "description": "Backend ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/models.ServiceHealthStatus"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Backend not found"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get backend health status",
        "tags": [
          "admin"
        ]
      }
    },
    "/admin/reload": {
      "post": {
        "description": "Reload the router configuration from file",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Failed to reload configuration"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Reload configuration",
        "tags": [
          "admin"
        ]
      }
    },
    "/admin/routes": {
      "get": {
        "description": "Get a list of all configured routes",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/models.RouteConfig"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "List all routes",
        "tags": [
          "admin"
        ]
      },
      "post": {
        "description": "Add a new route configuration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/models.RouteConfig"
              }
            }
          },
          "description": "Route configuration",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/models.RouteConfig"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Invalid request body"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Create a new route",
        "tags": [
          "admin"
        ]
      }
    },
    "/admin/routes/{id}": {
      "delete": {
        "description": "Remove a route configuration",
        "parameters": [
          {
            "description": "Route ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "No content"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Route not found"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Delete a route",
        "tags": [
          "admin"
        ]
      },
      "get": {
        "description": "Get details of a specific route",
        "parameters": [
          {
            "description": "Route ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/models.RouteConfig"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Route not found"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get a route by ID",
        "tags": [
          "admin"
        ]
      },
      "put": {
        "description": "Update an existing route configuration",
        "parameters": [
          {
            "description": "Route ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/models.RouteConfig"
              }
            }
          },
          "description": "Updated route configuration",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/models.RouteConfig"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Invalid request body"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Route not found"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Update a route",
        "tags": [
          "admin"
        ]
      }
    },
    "/api/etc/accounts": {
      "get": {
        "description": "環境変数 `ETC_CORP_ACCOUNTS` に設定されているアカウント名の一覧を取得します。\nセキュリティのため、パスワードは表示されません。\n\nこのエンドポイントは、APIを使用する前に利用可能なアカウントを確認するために使用できます。\n",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "with_accounts": {
                    "summary": "アカウントが設定されている場合",
                    "value": {
                      "accounts": [
                        "ohishiexp",
                        "ohishiexp1",
                        "ohishiexp2"
                      ],
                      "configured": true,
                      "count": 3,
                      "message": "環境変数 ETC_CORP_ACCOUNTS から読み込み"
                    }
                  },
                  "without_accounts": {
                    "summary": "アカウントが未設定の場合",
                    "value": {
                      "accounts": [],
                      "configured": false,
                      "count": 0,
                      "message": "環境変数 ETC_CORP_ACCOUNTS が設定されていません"
                    }
                  }
                },
                "schema": {
                  "properties": {
                    "accounts": {
                      "description": "利用可能なアカウントID一覧",
                      "example": [
                        "ohishiexp",
                        "ohishiexp1"
                      ],
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "configured": {
                      "description": "アカウントが設定されているか",
                      "example": true,
                      "type": "boolean"
                    },
                    "count": {
                      "description": "アカウント数",
                      "example": 2,
                      "type": "integer"
                    },
                    "message": {
                      "description": "ステータスメッセージ",
                      "example": "環境変数 ETC_CORP_ACCOUNTS から読み込み",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "アカウント一覧取得成功"
          }
        },
        "summary": "利用可能なアカウント一覧取得",
        "tags": [
          "System"
        ]
      }
    },
    "/api/etc/download": {
      "post": {
        "description": "指定した期間のETC明細を複数アカウントから一括ダウンロード。\n\n## アカウント設定方法\n\n### 1. リクエストボディで指定する場合\n```json\n{\n  \"accounts\": [\n    {\"user_id\": \"ohishiexp\", \"password\": \"pass1\"},\n    {\"user_id\": \"ohishiexp1\", \"password\": \"pass2\"}\n  ],\n  \"from_date\": \"2025-08-01\",\n  \"to_date\": \"2025-09-15\"\n}\n```\n\n### 2. 環境変数を使用する場合\naccountsパラメータを省略すると、環境変数 `ETC_CORP_ACCOUNTS` から自動的に読み込まれます。\n```\nETC_CORP_ACCOUNTS=ohishiexp:pass1,ohishiexp1:pass2\n```\n\n**利用可能なアカウントを確認するには:**\n```\nGET /api/etc/accounts\n```\n\n### 3. カスタム設定を使用する場合\nconfigパラメータで、ダウンロード処理の詳細な設定が可能です。\n",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "with_accounts": {
                  "summary": "アカウント指定あり",
                  "value": {
                    "accounts": [
                      {
                        "password": "password123",
                        "user_id": "ohishiexp"
                      },
                      {
                        "password": "password456",
                        "user_id": "ohishiexp1"
                      }
                    ],
                    "from_date": "2025-08-01",
                    "to_date": "2025-09-15"
                  }
                },
                "with_config": {
                  "summary": "カスタム設定付き",
                  "value": {
                    "config": {
                      "download_path": "./custom_downloads",
                      "headless": false,
                      "retry_count": 5,
                      "timeout": 60000
                    },
                    "from_date": "2025-08-01",
                    "to_date": "2025-09-15"
                  }
                },
                "without_accounts": {
                  "summary": "環境変数使用（accountsパラメータ省略）",
                  "value": {
                    "from_date": "2025-08-01",
                    "to_date": "2025-09-15"
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/DownloadRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "failed_count": 0,
                  "results": [
                    {
                      "csv_path": "./downloads/ETC_20250815_ohishiexp.csv",
                      "record_count": 125,
                      "success": true,
                      "user_id": "ohishiexp"
                    },
                    {
                      "csv_path": "./downloads/ETC_20250815_ohishiexp1.csv",
                      "record_count": 87,
                      "success": true,
                      "user_id": "ohishiexp1"
                    }
                  ],
                  "success_count": 2,
                  "total_records": 212
                },
                "schema": {
                  "$ref": "#/components/schemas/DownloadResponse"
                }
              }
            },
            "description": "ダウンロード成功"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "error": "Invalid from_date format"
                },
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "リクエストエラー"
          },
          "401": {
            "description": "認証エラー"
          },
          "500": {
            "description": "サーバーエラー"
          }
        },
        "summary": "ETC明細ダウンロード（複数アカウント対応）",
        "tags": [
          "Download"
        ]
      }
    },
    "/api/etc/download-async": {
      "post": {
        "description": "非同期でETC明細をダウンロードし、ジョブIDを返します。\nジョブIDを使って進捗を確認できます。\n\n**使用方法:**\n1. このエンドポイントでジョブを開始\n2. 返されたjob_idで `/api/etc/download-status/{job_id}` をポーリング\n3. statusが\"completed\"になったら結果を取得\n\n**進捗確認の例:**\n```javascript\n// ジョブ開始\nconst response = await fetch('/api/etc/download-async', {\n  method: 'POST',\n  headers: {'Content-Type': 'application/json'},\n  body: JSON.stringify({\n    from_date: '2025-08-01',\n    to_date: '2025-09-15'\n  })\n});\nconst {job_id} = await response.json();\n\n// 進捗確認（1秒おきにポーリング）\nconst checkProgress = setInterval(async () =\u003e {\n  const status = await fetch(`/api/etc/download-status/${job_id}`);\n  const job = await status.json();\n  console.log(`進捗: ${job.progress}% - ${job.message}`);\n\n  if (job.status === 'completed') {\n    clearInterval(checkProgress);\n    console.log('完了:', job.result);\n  }\n}, 1000);\n```\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DownloadRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "job_id": {
                      "description": "ジョブID",
                      "example": "550e8400-e29b-41d4-a716-446655440000",
                      "type": "string"
                    },
                    "status_url": {
                      "description": "ステータス確認URL",
                      "example": "/api/etc/download-status/550e8400-e29b-41d4-a716-446655440000",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "ジョブ開始成功"
          },
          "400": {
            "description": "リクエストエラー"
          }
        },
        "summary": "ETC明細ダウンロード（非同期・進捗確認可能）",
        "tags": [
          "Download"
        ]
      }
    },
    "/api/etc/download-single": {
      "post": {
        "description": "単一アカウントの明細をダウンロード。\n\n## アカウント設定方法\n\nリクエストボディで直接アカウント情報を指定します。\nこのエンドポイントは環境変数を使用せず、必ずリクエストボディでアカウント情報を指定する必要があります。\n\n### 使用例\n```json\n{\n  \"user_id\": \"ohishiexp\",\n  \"password\": \"password123\",\n  \"from_date\": \"2025-08-01\",\n  \"to_date\": \"2025-09-15\"\n}\n```\n\n### 注意事項\n- `user_id` と `password` は必須パラメータです\n- このエンドポイントは単一アカウントのみを処理します\n- 複数アカウントを処理する場合は `/api/etc/download` を使用してください\n",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "ohishiexp1_account": {
                  "summary": "ohishiexp1 アカウントの例",
                  "value": {
                    "from_date": "2025-08-01",
                    "password": "password456",
                    "to_date": "2025-09-15",
                    "user_id": "ohishiexp1"
                  }
                },
                "ohishiexp_account": {
                  "summary": "ohishiexp アカウントの例",
                  "value": {
                    "from_date": "2025-08-01",
                    "password": "password123",
                    "to_date": "2025-09-15",
                    "user_id": "ohishiexp"
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/SingleDownloadRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "csv_path": "./downloads/ETC_20250815_ohishiexp.csv",
                  "record_count": 125,
                  "records": [
                    {
                      "amount": 1200,
                      "entrance_ic": "東京",
                      "exit_ic": "横浜",
                      "usage_date": "2025-08-15",
                      "usage_time": "14:30"
                    }
                  ],
                  "success": true,
                  "user_id": "ohishiexp"
                },
                "schema": {
                  "$ref": "#/components/schemas/DownloadResult"
                }
              }
            },
            "description": "ダウンロード成功"
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "invalid_date": {
                    "value": {
                      "error": "Invalid from_date format"
                    }
                  },
                  "missing_user_id": {
                    "value": {
                      "error": "user_id is required"
                    }
                  }
                },
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "リクエストエラー"
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "error": "Login failed: Invalid credentials"
                },
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "認証エラー"
          },
          "500": {
            "description": "サーバーエラー"
          }
        },
        "summary": "単一アカウントETC明細ダウンロード",
        "tags": [
          "Download"
        ]
      }
    },
    "/api/etc/download-status/{job_id}": {
      "get": {
        "description": "ジョブIDを指定してダウンロードの進捗状況を取得します。\n\n**ステータス値:**\n- `pending`: 処理待機中\n- `processing`: 処理中\n- `completed`: 完了\n- `failed`: 失敗\n\n**ポーリング推奨間隔:** 1-2秒\n",
        "parameters": [
          {
            "description": "ジョブID",
            "in": "path",
            "name": "job_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "created_at": "2025-09-15T12:00:00Z",
                  "id": "550e8400-e29b-41d4-a716-446655440000",
                  "message": "アカウント ohishiexp を処理中... (2/3)",
                  "progress": 45,
                  "status": "processing",
                  "updated_at": "2025-09-15T12:00:30Z"
                },
                "schema": {
                  "properties": {
                    "created_at": {
                      "description": "ジョブ作成日時",
                      "format": "date-time",
                      "type": "string"
                    },
                    "error": {
                      "description": "エラーメッセージ（statusがfailedの場合）",
                      "type": "string"
                    },
                    "id": {
                      "description": "ジョブID",
                      "type": "string"
                    },
                    "message": {
                      "description": "現在の処理内容",
                      "type": "string"
                    },
                    "progress": {
                      "description": "進捗率（%）",
                      "maximum": 100,
                      "minimum": 0,
                      "type": "integer"
                    },
                    "result": {
                      "description": "完了時の結果（statusがcompletedの場合）",
                      "type": "object"
                    },
                    "status": {
                      "description": "ジョブステータス",
                      "enum": [
                        "pending",
                        "processing",
                        "completed",
                        "failed"
                      ],
                      "type": "string"
                    },
                    "updated_at": {
                      "description": "最終更新日時",
                      "format": "date-time",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "ジョブステータス取得成功"
          },
          "404": {
            "description": "ジョブが見つからない"
          }
        },
        "summary": "ダウンロードジョブの進捗確認",
        "tags": [
          "Download"
        ]
      }
    },
    "/api/etc/parse-csv": {
      "post": {
        "description": "アップロードされたCSVファイルをパース",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "description": "CSVファイル",
                    "format": "binary",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "count": {
                      "type": "integer"
                    },
                    "records": {
                      "items": {
                        "$ref": "#/components/schemas/ETCMeisai"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "パース成功"
          }
        },
        "summary": "CSVファイルパース",
        "tags": [
          "Parse"
        ]
      }
    },
    "/dtako/events": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Get event data with location information and optional filtering",
        "parameters": [
          {
            "description": "Start date (YYYY-MM-DD)",
            "in": "query",
            "name": "from",
            "type": "string"
          },
          {
            "description": "End date (YYYY-MM-DD)",
            "in": "query",
            "name": "to",
            "type": "string"
          },
          {
            "description": "Event type filter",
            "in": "query",
            "name": "type",
            "type": "string"
          },
          {
            "description": "運行NO (Required for performance reasons)",
            "in": "query",
            "name": "unko_no",
            "required": true,
            "type": "string"
          },
          {
            "description": "Maximum number of records to return (default: 100, max: 1000)",
            "in": "query",
            "name": "limit",
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List of dtako events",
            "schema": {
              "items": {
                "$ref": "#/definitions/models.DtakoEvent"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/models.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/models.ErrorResponse"
            }
          }
        },
        "summary": "List Dtako Events",
        "tags": [
          "dtako_events"
        ]
      }
    },
    "/dtako/events/import": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Import event data from production database",
        "parameters": [
          {
            "description": "Import request",
            "in": "body",
            "name": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.ImportRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Import successful",
            "schema": {
              "$ref": "#/definitions/models.ImportResult"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/models.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/models.ErrorResponse"
            }
          }
        },
        "summary": "Import Dtako Events",
        "tags": [
          "dtako_events"
        ]
      }
    },
    "/dtako/events/{id}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Get specific event data by ID",
        "parameters": [
          {
            "description": "Event ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Dtako event found",
            "schema": {
              "$ref": "#/definitions/models.DtakoEvent"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/models.ErrorResponse"
            }
          }
        },
        "summary": "Get Dtako Event by ID",
        "tags": [
          "dtako_events"
        ]
      }
    },
    "/dtako/ferry_rows": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Retrieve ferry row records with optional date range and ferry company filter",
        "parameters": [
          {
            "description": "Start date (YYYY-MM-DD)",
            "in": "query",
            "name": "from",
            "type": "string"
          },
          {
            "description": "End date (YYYY-MM-DD)",
            "in": "query",
            "name": "to",
            "type": "string"
          },
          {
            "description": "Filter by ferry company name",
            "in": "query",
            "name": "ferry_company",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/models.DtakoFerryRow"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/models.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/models.ErrorResponse"
            }
          }
        },
        "summary": "List ferry row records",
        "tags": [
          "dtako_ferry"
        ]
      }
    },
    "/dtako/ferry_rows/import": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Import ferry row records from production database for a date range",
        "parameters": [
          {
            "description": "Import request with date range and optional ferry company filter",
            "in": "body",
            "name": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.ImportRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.ImportResult"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/models.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/models.ErrorResponse"
            }
          }
        },
        "summary": "Import ferry row records from production",
        "tags": [
          "dtako_ferry"
        ]
      }
    },
    "/dtako/ferry_rows/{id}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Retrieve a specific ferry row record by its ID",
        "parameters": [
          {
            "description": "Ferry row record ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.DtakoFerryRow"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/models.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/models.ErrorResponse"
            }
          }
        },
        "summary": "Get ferry row record by ID",
        "tags": [
          "dtako_ferry"
        ]
      }
    },
    "/dtako/rows": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Get vehicle operation data with optional date and vehicle filtering",
        "parameters": [
          {
            "description": "Start date (YYYY-MM-DD)",
            "in": "query",
            "name": "from",
            "type": "string"
          },
          {
            "description": "End date (YYYY-MM-DD)",
            "in": "query",
            "name": "to",
            "type": "string"
          },
          {
            "description": "Read date (YYYY-MM-DD)",
            "in": "query",
            "name": "read_date",
            "type": "string"
          },
          {
            "description": "Vehicle CC filter",
            "in": "query",
            "name": "vehicle_cc",
            "type": "string"
          },
          {
            "description": "Vehicle CD filter",
            "in": "query",
            "name": "vehicle_cd",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List of dtako rows",
            "schema": {
              "items": {
                "$ref": "#/definitions/models.DtakoRow"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/models.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/models.ErrorResponse"
            }
          }
        },
        "summary": "List Dtako Rows",
        "tags": [
          "dtako_rows"
        ]
      }
    },
    "/dtako/rows/import": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Import vehicle operation data from production database",
        "parameters": [
          {
            "description": "Import request",
            "in": "body",
            "name": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/models.ImportRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Import successful",
            "schema": {
              "$ref": "#/definitions/models.ImportResult"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/models.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/models.ErrorResponse"
            }
          }
        },
        "summary": "Import Dtako Rows",
        "tags": [
          "dtako_rows"
        ]
      }
    },
    "/dtako/rows/{id}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Get specific vehicle operation data by ID",
        "parameters": [
          {
            "description": "Row ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Dtako row found",
            "schema": {
              "$ref": "#/definitions/models.DtakoRow"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/models.ErrorResponse"
            }
          }
        },
        "summary": "Get Dtako Row by ID",
        "tags": [
          "dtako_rows"
        ]
      }
    },
    "/health": {
      "get": {
        "description": "APIサーバーの稼働状態を確認",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "example": "ok",
                      "type": "string"
                    },
                    "timestamp": {
                      "format": "date-time",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "サーバー正常稼働中"
          }
        },
        "summary": "ヘルスチェック",
        "tags": [
          "System"
        ]
      }
    }
  },
  "servers": [
    {
      "url": "http://localhost:8080/"
    }
  ]
}